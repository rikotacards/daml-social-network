module TokenArt where
import Iou
template TokenArt with
    issuer: Party
    owner: Party
    lastPrice: Decimal
    issuedAt: Time
    image: Text
    royaltyRate: Decimal
  where 
    -- signatory needs to include owner and issuer
    -- otherwise issuer can just archive contract without owners consent
    signatory issuer
    ensure lastPrice >= 0.0

    key (issuer, owner, image): (Party, Party, Text)
    maintainer key._1

    choice Transfer: ContractId TokenArt
      with
        newOwner: Party
      controller newOwner
      do
        create this with 
          owner = newOwner

    controller owner can
      TransferOwnership: ContractId TokenArt
        with
          newOwner: Party
          price: Decimal
        do
          create this with 
            owner = newOwner 
            lastPrice = price
          
      Offer: ContractId TokenOffer
        with
          reader: Party
          price: Decimal 
          contract: ContractId TokenArt

        do 
          -- conver to choice
          create TokenOffer with ..

   

-- Offer represented in gallery  
template TokenOffer with
    issuer: Party
    reader: Party
    owner: Party
    price: Decimal
    issuedAt: Time
    image: Text
    royaltyRate: Decimal
    lastPrice: Decimal

  where 
    signatory issuer, owner
    observer reader
    key (issuer, owner, image): (Party, Party, Text)
    maintainer key._2
    ensure price >= 0.0

    controller owner can
      ArchiveOffer: ContractId TokenArt
        do
          create TokenArt with ..
      
    choice AcceptOffer: (ContractId TokenArt, ContractId IouTransfer)
      with 
        acceptingOwner: Party
        iouCid: ContractId Iou
      controller acceptingOwner
         
      do
        (splitCid, restCid) <- exercise iouCid Iou_Split with
          splitAmount = price
        
        iouTransferCid <- exercise splitCid Iou_Transfer with
          newOwner = owner

        -- TODO this creates two contracts
        tokenWithNewOwner <- create TokenArt with
          owner = acceptingOwner
          lastPrice = price
          ..
        return (tokenWithNewOwner, iouTransferCid)
    





      
